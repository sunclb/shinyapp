data <- Quandl.datatable('MER/F1', ticker=“DEB”)
data <- Quandl.datatable('MER/F1',qopts.columns=c(“compnumber”, “ticker”))
data <- Quandl.datatable('MER/F1',qopts.columns=c("compnumber", "ticker"))
View(data)
data <- Quandl.datatable('MER/F1', ticker="DEB‘)
data <- Quandl.datatable('MER/F1', ticker="DEB“)
data <- Quandl.datatable('MER/F1', ticker="DEB")
?Quandl
mydata = Quandl.datatable("ZACKS/FC", ticker="AAPL", paginate=T)
View(mydata)
mydata = Quandl.datatable("ZACKS/FC", ticker=c("AAPL","MSFT"), paginate=T)
mydata = Quandl.datatable("DEB/BAYERCROP_Q_INT", paginate=T)
mydata = Quandl.datatable("DEB/BAYERCROP_A_EVEBIT", paginate=T)
mydata = Quandl.datatable("DEB", paginate=T)
Quandl("DEB/BAYERCROP_A_CASHDEBT")
Quandl("NSE/BAYERCROP")
mydata<-Quandl("NSE/BAYERCROP")
mydata<-Quandl("NSE/BAYERCROP",type="raw")
mydata<-Quandl("NSE/BAYERCROP",type="ts")
mydata<-Quandl("NSE/BAYERCROP",type="zoo")
mydata<-Quandl.datatable("NSE/BAYERCROP")
search.results("apple",silence=FALSE)
search.results<-Quandl.search("apple",silence=FALSE)
search.results<-Quandl.search("apple",silence=FALSE,page=1000)
search.results<-Quandl.search("apple",silence=FALSE)
search.results<-Quandl.search("apple",silence=FALSE,per_page = 10000)
search.results<-Quandl.search("Apple",silence=FALSE,per_page = 10000)
search.results<-Quandl.search("Apple Inc",silence=FALSE,per_page = 10000)
?Quandl.datatable
Quandl.datatable("WIKI/AAPL")
Quandl.datatable('WIKI/AAPL')
rm(ls=list())
rm(ls=ls())
rm(list=ls())
?sample
sample(1:2)
?loess
?classCenter
library(caret)
install.packages("caret")
version(caret)
package_version(caret)
library(caret)
library(ggplot2)
install.packages("ggplot2")
library(caret)
library(ggplot2)
library(caret)
package_version(caret)
package_version("caret")
package_version(ggplot2)
package_version("ggplot2")
packageVersion
packageVersion(caret)
packageVersion("caret")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
packageVersion("AppliedPredictiveModeling")
install.packages("ElemStatLearn")
library(ElemStatLearn)
packageVersion("ElemStatLearn")
install.packages("pgmm")
library(pgmm)
packageVersion("pgmm")
install.packages("rpart")
install.packages("rpart")
library(rpart)
packageVersion(rpart)
packageVersion("rpart")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(lattice)
library(ggplot2)
library(caret)
View(segmentationOriginal)
?subset
str(segmentationOriginal)
test<-segmentationOriginal[segmentationOriginal$Case="Test",]
test<-segmentationOriginal[segmentationOriginal$Case=="Test",]
train<-segmentationOriginal[segmentationOriginal$Case=="Train",]
set.seed(125)
?caret
caret
fit1<-train(train,train$Class,method="rpart")
library(rpart)
rpartfit<-train(Class~.,data=train,method="rpart")
install.packages("e1071")
library(e1071)
rpartfit<-train(Class~.,data=train,method="rpart")
getModelInfo()
?rpart
summary(rpartfit)
rpartfit$frame
str(rpartfit)
z.auto<-rpart(Mileage~Weight,car.test.frame)
summary(z.auto)
meanvar(z.auto)
meanvar(z.auto,log="xy")
fit <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis
)
print(fit)
print(z.auto)
view(car.test.frame)
View(car.test.frame)
print(fit)
path.rpart(fit, node = c(11, 22))
fit <- rpart(Price ~ Mileage + Type + Country, cu.summary)
par(xpd = TRUE)
plot(fit, compress = TRUE)
text(fit, use.n = TRUE)
print(fit)
plot(z.auto)
text(z.auto)
print(z.auto)
plotcp(z.auto)
print(rpartfit)
plot(rpartfit)
rm(list=ls())
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
View(segmentationOriginal)
traindata<-segmentationOriginal[segmentationOriginal$Case=="Train",]
testdata<-segmentationOriginal[segmentationOriginal$Case=="Test",]
set.seed(125)
fit<-train(Class~.,data = traindata,method="rpart")
plot(fit)
test(fit)
text(fit)
print(fit)
summary(fit)
rpartfit<-rpart(Class~.,data=traindata)
print(rpartfit)
plot(rpartfit)
text(rpartfit)
?cart
?rpart
set.seed(125)
rpartfit<-rpart(Class~.,data=traindata)
plot(rpartfit)
text(rpartfit)
fit<-train(Class~.,data=traindata,method="rpart")
plot(fit)
fit$modelInfo
fit$levels
fit$finalModel
plot(fit$finalModel)
text(plot(fit$finalModel))
fit$results
fit$terms
?text
print(fit$finalModel)
plot(fit$finalModel)
text(fit$finalModel)
rm(list=ls())
install.packages("pgmm")
library(pgmm)
data(olive)
View(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
newdata
colMeans(olive)
?t
fit<-train(Area~.,data=olive,method="rpart")
fit$finalModel
?predict
predict(fit,newdata)
predict(fit$finalModel,newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
args(methods)
set.seed(13234)
View(testSA)
?SAheart
fit<-train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=testSA,method="glm",family="binomial")
fit$finalModel
trainSApre<-predict(fit,trainSA)
testSApre<-predict(fit,testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd,trainSApre)
missClass(testSA$chd,testSApre)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
?varlmp
?varImp
View(vowel.test)
rf<-randomForest(y~.,data=vowel.test)
?randomForest
library(randomForest)
install.packages("randomForest")
library(randomForest)
rf<-randomForest(y~.,data=vowel.test)
rf<-randomForest(y~.,data=vowel.train)
print(rf)
varImp(rf)
importance(rf)
rf<-randomForest(y~.,data=vowel.train,ntree=2000,importance=TRUE)
varImp(rf)
rf<-randomForest(y~.,data=vowel.train,importance=TRUE)
varImp(rf)
importance(rf)
rf<-randomForest(y~.,data=vowel.train)
importance(rf)
varImp(rf)
?randomForest
set.seed(33833)
rf<-randomForest(y~.,data=vowel.train)
importance(rf)
order(importance(rf))
varImp(rf)
print(rf)
trrf<-train(y~.,data=vowel.train,method="rf")
varImp(trrf)
importance(rf)
order(importance(rf))
order(importance(trrf))
rm(list-ls())
rm(ls=list())
rm(list=ls())
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
train_rf<-train(as.factor(y)~.,data=vowel.train,method="rf")
train_gbm<-train(as.factor(y)~.,data=vowel.train,method="gbm")
pre_rf<-predict(train_rf,vowel.test)
View(pre_rf)
confusionMatrix(pre_rf,vowel.test$y)
confusionMatrix(pre_rf,as.factor(vowel.test$y))
pre_gbm<-predict(train_gbm,vowel.test)
confusionMatrix(pre_gbm,as.factor(vowel.test$y))
agree<-pre_gbm==pre_rf
correct<-pre_gbm==vowel.test$y
sum(agree*correct)/sum(agree)
rm(list=ls())
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(26433)
View(training)
mrf<-train(diagnosis~.,data=training,method="rf")
mgbm<-train(diagnosis~.,data=training,method="gbm")
mlda<-train(diagnosis~.,data=training,method="lda")
ptrf<-predict(mrf,training)
ptgbm<-predict(mgbm,training)
ptlda<-predict(mlda,training)
cbdf<-data.frame(diagnosis=training$diagnosis,mrf=ptrf,mgbm=ptgbm,mlda=ptlda)
cbmrf<-train(diagnosis~.,data=cbdf,method="rf")
View(cbdf)
sum(cbdf$diagnosis==cbdf$mrf)
sum(cbdf$diagnosis==cbdf$mgbm)
sum(cbdf$diagnosis==cbdf$mlda)
ptrf<-predict(mrf,testing)
ptgbm<-predict(mgbm,testing)
ptlda<-predict(mlda,testing)
cbdf<-data.frame(diagnosis=training$diagnosis,mrf=ptrf,mgbm=ptgbm,mlda=ptlda)
cbdf<-data.frame(diagnosis=testing$diagnosis,mrf=ptrf,mgbm=ptgbm,mlda=ptlda)
cbmrf<-train(diagnosis~.,data=cbdf,method="rf")
View(cbdf)
cbm<-train(diagnosis~.,data=cbdf,method="rf")
print(cbm)
confusionMatrix(ptrf,testing$diagnosis)
confusionMatrix(ptgbm,testing$diagnosis)
confusionMatrix(ptlda,testing$diagnosis)
ptcb<-predict(cbm,testing)
ptcb<-predict(cbm,cbdf)
confusionMatrix(ptcb,testing$diagnosis)
rm(list=ls())
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
fit<-train(CompressiveStrength~.,data=training, method="lasso")
print(fit)
?plot.enet
plot(fit)
fit$finalModel
plot(fit$finalModel)
model = train(CompressiveStrength ~ ., method = 'lasso', data = training)
plot(model$finalModel)
fit<-train(CompressiveStrength~.,data=training, method="lasso")
class(fit$finalModel)
plot(fit$finalModel)
plot.enet(fit$finalModel)
plot(fit$finalModel,xvar="penalty")
fit$finalModel$xNames
fit <- train(CompressiveStrength~., data= training, method = "lasso")
plot(fit$finalModel)
?plot.enet
fit$finalModel
fit <- train(CompressiveStrength~., data= training, method = "lasso")
plot(fit$finalModel)
search()
library(caret)
library(ggplot2)
plot.enet(fit)
plot(fit$finalModel)
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
View(training)
preProc <- preProcess(log10(spam[,-58]+1),method="pca",pcaComp=2)
spamPC <- predict(preProc,log10(spam[,-58]+1))
View(spanPC)
View(spamPC)
preProc <- preProcess(log10(training[,-58]+1),method="pca",pcaComp=2)
trainPC <- predict(preProc,log10(training[,-58]+1))
View(trainPC)
library(RWeka)
?runif
library(shiny)
library(miniUI)
install.packages("miniUI")
library(miniUI)
install.packages("plotly")
install.packages("leaflet")
place<-"East Coast Park"
lat<-1.302496
lng<-103.918667
place<-c(place,"Merlion Park")
lat<-c(lat,1.286775)
lng<-c(lng,103.854355)
place<-c(place,"Garden by the Bay")
lat<-c(lat,1.283291)
lng<-c(lng,103.866096)
place<-c(place,"Sands sky park")
lat<-c(lat,1.284818)
lng<-c(lng,103.860856)
place<-c(place,"Universal Studio")
lat<-c(lat,1.254067)
lng<-c(lng,103.823868)
places
place
place[5]<-"Universal Studios"
place
place<-c(place,"Sentosa Island")
lat<-c(lat,1.253875)
lng<-c(lng,103.824419)
place<-c(place,"Botanic Gardens")
lat<-c(lat,1.316341)
lng<-c(lng,103.816167)
place<-c(place,"Singapore Zoo")
lat<-c(lat,1.404324)
lng<-c(lng,103.793028)
place<-c(place,"River Safari")
lat<-c(lat,1.403767)
lng<-c(lng,103.792664)
myplaces<-data.frame(place,lat,lng)
place
lat
lng
head(myplaces)
install.packages("stringr")
install.packages("stringr")
library(slidify)
slidify("index.rmd")
setwd("C:/Users/Ms Sun/Desktop/coursera/slidify")
slidify("index.rmd")
setwd("C:/Users/Ms Sun/Desktop/coursera/slidify/mydeck")
slidify("index.rmd")
str(BJsales)
str(InsectSprays)
str(Orange)
str(OrchardSprays)
help("OrchardSprays")
str(PlantGrowth)
help("PlantGrowth")
str(UCBAdmissions)
str(UKDriverDeaths)
str(USAccDeaths)
str(USArrests)
help("USArrests")
head(USArrests)
str(USPersonalExpenditure)
head(USPersonalExpenditure)
str(chickwts)
str(crimtab)
str(discoveries)
str(esoph)
head(esoph)
help(esoph)
View(esoph)
library(plotly)
agegp<-unique(esoph$agegp)
p<-list()
for(i in agegp){p[[i]]<-plot_ly(data=esoph[esoph$agegp==i,],x=~alcgp,y=~ncase/ncontrols,type="scatter",color=~tobgp)}
subplot(p)
for(i in agegp){p[[i]]<-plot_ly(data=esoph[esoph$agegp==i,],x=~alcgp,y=~ncases/ncontrols,type="scatter",color=~tobgp)}
subplot(p)
for(i in agegp){sl<-i=="25-34",p[[i]]<-plot_ly(data=esoph[esoph$agegp==i,],x=~alcgp,y=~ncases/ncontrols,type="scatter",color=~tobgp,showlegend=sl)}
for(i in agegp){sl<-(i=="25-34")p[[i]]<-plot_ly(data=esoph[esoph$agegp==i,],x=~alcgp,y=~ncases/ncontrols,type="scatter",color=~tobgp,showlegend=sl)}
for(i in agegp){sl<-(i=="25-34")p[[i]]<-plot_ly(data=esoph[esoph$agegp==i,],x=~alcgp,y=~ncases/ncontrols,type="scatter",color=~tobgp,showlegend=sl)}
for(i in agegp){sl<-(i=="25-34")
p[[i]]<-plot_ly(data=esoph[esoph$agegp==i,],x=~alcgp,y=~ncases/ncontrols,type="scatter",color=~tobgp,showlegend=sl)}
subplot(p)
for(i in agegp){sl<-(i=="25-34")
p[[i]]<-plot_ly(data=esoph[esoph$agegp==i,],x=~alcgp,y=~ncases/ncontrols,type="scatter",color=~tobgp,showlegend=sl),mode="markers"}
for(i in agegp){sl<-(i=="25-34")
p[[i]]<-plot_ly(data=esoph[esoph$agegp==i,],x=~alcgp,y=~ncases/ncontrols,type="scatter",color=~tobgp,showlegend=sl,mode="markers")}
subplot(p)
for(i in agegp){sl<-(i=="25-34")
p[[i]]<-plot_ly(data=esoph[esoph$agegp==i,],x=~alcgp,y=~ncases/ncontrols,type="box",boxpoints="all",color=~tobgp,showlegend=sl,jitter=0.3)}
subplot(p)
for(i in agegp){sl<-(i=="25-34")
p[[i]]<-plot_ly(data=esoph[esoph$agegp==i,],x=~alcgp,y=~ncases/ncontrols,type="box",boxpoints="all",showlegend=sl,jitter=0.3)}
subplot(p)
pal<-plot_ly(data=esoph,x=~agegp,y=~ncases/ncontrols,type="box",boxpoints="all",color=~alcgp,jitter=0.3)
pal
p[[i]]<-plot_ly(data=esoph[esoph$agegp==i,],x=~interaction(agegp,alcgp),y=~ncases/ncontrols,type="box",boxpoints="all",showlegend=sl,jitter=0.3)}
p[[i]]<-plot_ly(data=esoph[esoph$agegp==i,],x=~interaction(agegp,alcgp),y=~ncases/ncontrols,type="box",boxpoints="all",showlegend=sl,jitter=0.3)
pal<-plot_ly(data=esoph,x=~interaction(agegp,alcgp),y=~ncases/ncontrols,type="box",boxpoints="all",color=~alcgp,jitter=0.3)
pal
pal<-plot_ly(data=esoph,x=~interaction(agegp,alcgp),y=~ncases/ncontrols,type="box",boxpoints="all",color=~tobgp,jitter=0.3)
pal
pal<-plot_ly(data=esoph,x=~interaction(agegp,alcgp),y=~ncases/ncontrols,type="box",boxpoints="all",color=~alcgp,jitter=0.3)
pto<-plot_ly(data=esoph,x=~interaction(agegp,tobgp),y=~ncases/ncontrols,type="box",boxpoints="all",color=tobgp,jitter=0.3)
pto<-plot_ly(data=esoph,x=~interaction(agegp,tobgp),y=~ncases/ncontrols,type="box",boxpoints="all",color=~tobgp,jitter=0.3)
pto
for(i in agegp){sl<-(i=="25-34")
p[[i]]<-plot_ly(data=esoph[esoph$agegp==i,],x=~alcgp,y=~ncases/ncontrols,type="box",boxpoints="all",color=~alcgp,showlegend=sl,jitter=0.3)}
subplot(p)
for(i in agegp){sl<-(i=="25-34")
p[[i]]<-plot_ly(data=esoph[esoph$agegp==i,],x=~alcgp,y=~ncases/ncontrols,type="box",boxpoints="all",color=~alcgp,showlegend=sl,jitter=0.3)%>%
layout(title=i)}
subplot(p)
plot_ly(mtcars, x = ~wt, y = ~mpg) %>%
slice(which.max(mpg)) %>%
add_annotations(text = "Good mileage")
?add_annotations
plot_ly(mtcars, x = ~wt, y = ~mpg) %>%
filter(gear == 5) %>%
add_annotations("five cylinder", ax = 40)
for(i in agegp){sl<-(i=="25-34")
p[[i]]<-plot_ly(data=esoph[esoph$agegp==i,],x=~alcgp,y=~ncases/ncontrols,type="box",boxpoints="all",color=~alcgp,showlegend=sl,jitter=0.3)
%>%add_annotations(x=0.5,y=1,text=i,showarrow=F,xref="paper",yref="paper")}
for(i in agegp){sl<-(i=="25-34")
p[[i]]<-plot_ly(data=esoph[esoph$agegp==i,],x=~alcgp,y=~ncases/ncontrols,type="box",boxpoints="all",color=~alcgp,showlegend=sl,jitter=0.3)%>%
add_annotations(x=0.5,y=1,text=i,showarrow=F,xref="paper",yref="paper")}
subplot(p)
?subplot
subplot(p,shareY=TRUE)
help(esoph)
?subplo
?subplot
for(i in agegp){
sl<-(i=="25-34")
p[[i]]<-plot_ly(data=esoph[esoph$agegp==i,],x=~alcgp,y=~ncases/ncontrols,type="box",boxpoints="all",color=~alcgp,showlegend=sl,jitter=0.3)%>%
add_annotations(x=0.5,y=0.9,text=paste("Age:",i),showarrow=F,xref="paper",yref="paper")%>%
layout(xaxis=list(title="Alcohol Group"))
}
subplot(p,shareY=TRUE,titleX=TRUE)
for(i in agegp){
sl<-(i=="25-34")
p[[i]]<-plot_ly(data=esoph[esoph$agegp==i,],x=~alcgp,y=~ncases/ncontrols,type="box",boxpoints="all",color=~alcgp,showlegend=sl,jitter=0.3)%>%
add_annotations(x=0.5,y=0.9,text=paste("Age:",i),showarrow=F,xref="paper",yref="paper")%>%
layout(xaxis=list(title="Alcohol Group"))
}
subplot(p)
subplot(p,shareY=TRUE,titleX=TRUE)
subplot(p,shareY=TRUE,titleX=TRUE)
for(i in agegp){
sl<-(i=="25-34")
p[[i]]<-plot_ly(data=esoph[esoph$agegp==i,],x=~alcgp,y=~ncases/ncontrols,type="box",boxpoints="all",color=~alcgp,showlegend=sl,jitter=0.3)%>%
add_annotations(x=0.5,y=0.9,text=paste("Age:",i),showarrow=F,xref="paper",yref="paper")%>%
layout(title="Consumption of Alcohol on Esophageal Cancer",xaxis=list(title="Alcohol Group"))
}
subplot(p,shareY=TRUE,titleX=TRUE)
for(i in agegp){
sl<-(i=="25-34")
p[[i]]<-plot_ly(data=esoph[esoph$agegp==i,],x=~alcgp,y=~ncases/ncontrols,type="box",boxpoints="all",color=~alcgp,showlegend=sl,jitter=0.3)%>%
add_annotations(x=0.5,y=0.9,text=paste("Age:<br>",i),showarrow=F,xref="paper",yref="paper")%>%
layout(title="Consumption of Alcohol on Esophageal Cancer",xaxis=list(title="Alcohol Group"))
}
subplot(p,shareY=TRUE,titleX=TRUE)
subplot(p,shareY=TRUE,titleX=TRUE)
subplot(p,shareY=TRUE,shareX=TRUE)
subplot(p,shareY=TRUE)
subplot(p,shareY=TRUE)%>%layout(annotations=list(x=0,y=0,text="Alcohol Group",showarrow=F,xref="paper",yref="paper"))
subplot(p,shareY=TRUE)%>%layout(annotations=list(x=-0.1,y=-0.1,text="Alcohol Group",showarrow=F,xref="paper",yref="paper"))
subplot(p,shareY=TRUE)%>%layout(annotations=list(x=-0.1,y=-0.1,text="Alcohol <br> Group",showarrow=F,xref="paper",yref="paper"))
help(esoph)
p2<-list()
for(i in agegp){
sl<-(i=="25-34")
p2[[i]]<-plot_ly(data=esoph[esoph$agegp==i,],x=~tobgp,y=~ncases/ncontrols,type="box",boxpoints="all",color=~tobgp,showlegend=sl,jitter=0.3)%>%
add_annotations(x=0.5,y=0.9,text=paste("Age:<br>",i),showarrow=F,xref="paper",yref="paper")%>%
layout(title="Smoking on Esophageal Cancer",xaxis=list(title="Tobacco Group"))
}
subplot(p2,shareY=TRUE)%>%layout(annotations=list(x=-0.1,y=-0.1,text="Tobacco <br> Group",showarrow=F,xref="paper",yref="paper"))
source(ggcorplot.R)
source("ggcorplot.R")
getwd
getwd()
install.packages("MASS")
